#user  nobody;
worker_processes  1;

error_log /tmp/error1.log  crit;  

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        ./nginx.pid;


events {
    worker_connections  1024;
}

stream{
log_format  access  '$remote_addr - [$time_local] '
                        '$status server_addr:$upstream_addr';


    upstream abc{
		#默认一个服尝试失败,选择另一个服
		#默认只有一个服则,该服不会不可用 即 max_fails 和 fail_timeout down会失效
		#least_conn;  #负载平衡,选择最小连接
		#ip_hash; #通过客户端的ip的hash值分配服务器(使总能分到同一服务器,但服务器不可用,就将会分到另一台服务器)
        	server 192.168.1.52:7190;
		#server 192.168.1.52:17190 max_fails=3 fail_timeout=30s;
		#在30s内发生3次访问失败,则接下来30s内该服不可用
		#backup将服务器标记为备份服务器。当主服务器不可用时，将传递与备份服务器的连接。
		#down将服务器标记为永久不可用。
    }
    upstream mysql{
	hash $remote_addr consistent;
        server 192.168.1.52:3306;
    }
    server{
        listen 17190;
	proxy_connect_timeout 5s;
        proxy_timeout 20s; #多少秒没有数据传输,关闭连接(猜想)
        proxy_pass abc;
	#proxy_protocol on;#开启tcp代理协议 需接收方支持
	#proxy_bind $remote_addr transparent; 
        access_log /tmp/access1.log access; #日志格式及日志存放路径
	error_log /tmp/serror1.log; #错误日志存放路径
    }

 server{
        listen 53306;
	proxy_connect_timeout 1s;
        proxy_timeout 3s; #多少秒没有数据传输,关闭连接(猜想)
        proxy_pass mysql;
	#proxy_protocol on;#开启tcp代理协议 需接收方支持(mysql貌似不支持)
	#proxy_bind $remote_addr transparent; 
        access_log /tmp/access2.log access; #日志格式及日志存放路径
	error_log /tmp/serror2.log; #错误日志存放路径
    }


}
